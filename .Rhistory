hi.there <- function() {
+ cat("Hello World!\n")
+ }
hi.there <- function() {
+ cat("Hello World!\n")}
hi.there <- function() {
+ cat("Hello World!\n")}
hi.there
hi.there()
hi.there <- function() {cat("Hello World!\n")}
hi.there()
y<-NULL
y
class(y)
y<-c(NA,2,4)
y
class(y)
class(y[1])
which(z*z>8)
m <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=T)
m
kids1 <- c("Jack","Jill","Lillian","John")
states1<- c("CA","MA","MA","HI")
d1 <- data.frame(kids1,states1,stringsAsFactors=FALSE)
##
kids2 <- c("Jack","Jill","Lillian")
ages2 <- c(12,10,7)
d2 <- data.frame(kids2,ages2,stringsAsFactors=FALSE)
kids1 <- c("Jack","Jill","Lillian","John")
states1<- c("CA","MA","MA","HI")
d1 <- data.frame(kids1,states1,stringsAsFactors=FALSE)
##
kids2 <- c("Jack","Jill","Lillian")
ages2 <- c(12,10,7)
d2 <- data.frame(kids2,ages2,stringsAsFactors=FALSE)
##
name <- c("Jack","Jill","Lillian")
ages2 <- c(12,10,7)
d3 <- data.frame(kids2,ages2,stringsAsFactors=FALSE)
d <- merge(d1,d2)
d
kids <- c("Jack","Jill","Lillian","John")
states1<- c("CA","MA","MA","HI")
d1 <- data.frame(kids,states1,stringsAsFactors=FALSE)
##
kids <- c("Jack","Jill","Lillian")
ages2 <- c(12,10,7)
d2 <- data.frame(kids,ages2,stringsAsFactors=FALSE)
##
name <- c("Jack","Jill","Lillian")
ages <- c(12,10,7)
d3 <- data.frame(name,ages,stringsAsFactors=FALSE)
d <- merge(d1,d2)
d
d <- merge(d1,d3, by.x = "kids1", by.y = "name")
d <- merge(d1,d3, by.x = "kids", by.y = "name")
d
install.packages("googleVis")
install.packages("apsrtable")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
source("http://gking.harvard.edu/zelig/install.R")
install.packages("ZeligBayesian",
repos ="http://r.iq.harvard.edu/",
type ="source"
)
sessionInfo()
install.packages("repmis")
library("repmis", lib.loc="~/R/win-library/3.1")
data<-repmis::source_DropboxData("quiz3.csv","pzme4gzsjuf2i32", sep = ",", header = TRUE)
data<-repmis::source_DropboxData("quiz3.csv","q554hao6v5eah9m", sep = ",", header = TRUE)
View(data)
install.packages("WDI")
install.packages(c("car", "effects", "Hmisc", "magrittr", "missMDA", "Quandl", "TH.data"))
library(shiny)
runExample("01_hello")
runExample("08_html")
runExample("08_html")
runExample()
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("06_tabsets")
runExample("07_widgets")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
runExample("11_timer")
runExample("11_timer")
library("slidify", lib.loc="~/R/win-library/3.1")
?slidify-package
?slidify
install.packages("gcookbook")
library(ggplot2)
library(gcookbook)
plot(mtcars$wt,mtcars$mpg)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
ggplot(mtcars,aes(x=wt,y=mpg)) +geom_point()
plot(pressure$temperature,pressure$pressure,type="l")
plot(pressure$temperature,pressure$pressure,type="l")
points(pressure$temperature,pressure$pressure)
lines(pressure$temperature,pressure$pressure/2,col="red")
points(pressure$temperature,pressure$pressure/2,col="red")
qplot(pressure$temperature,pressure$pressure,geom="line")
qplot(temperature,pressure,data=pressure,geom="line")
qplot(temperature,pressure,data=pressure,geom=c("line", "point"))
barplot(BOD$demand,names.arg=BOD$Time)
table(mtcars$cyl)
barplot(table(mtcars$cyl))
barplot(table(mtcars$cyl))
table(mtcars$cyl)
barplot(table(mtcars$cyl))
barplot(BOD$demand,names.arg=BOD$Time)
qplot(BOD$Time,BOD$demand,geom="bar",stat="identity")
qplot(factor(BOD$Time),BOD$demand,geom="bar",stat="identity")
head(BOD)
str(BOD)
qplot(mtcars$cyl)
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
View(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "US" | country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,
| probs = 0.99)
quantile(pack_sum$count,probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(top_counts,desc(count))
quantile(pack_sum$unique,probs = 0.99)
top_unique<-filter(pack_sum, count>465)
top_unique<-filter(pack_sum, unique>465)
top_unique
arrange(top_counts,desc(unique))
arrange(top_unique,desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, count, -grade)
res
separate(res, col=sex_class,into=c("sex","class"))
?separate
?separate
separate(res, col=sex_class,into=c("sex","class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed,failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
day(this_day)
wday()
wday(this_day)
wday(this_day,label = TRUE)
this_moment<-now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("/19/2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 14, minutes = 24)
this_moment
nyc<-now(tzone = "America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<-update(depart, hours = 17, minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone = "Asia/Hong_Kong")
arrive
last_time<-with_tz(mdy("June 17, 2008"),tzone = "Singapore")
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(arrive,last_time)
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
install.packages(c("jsonlite", "multcomp", "RCurl"))
Sys.getlocale("LC_TIME")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
diff(1:10, 2)
diff(1:10, 2,2)
range(1:10)
diff(range(1:10))
install.packages("tidyr")
install.packages("tidyr")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages(c("digest", "effects", "gss", "Rcmdr", "RColorBrewer", "RCurl", "repmis", "reshape2", "seriation"))
library("lubridate","dplyr","tidyr")
library("lubridate","dplyr")
library("lubridate","dplyr","ggplo2")
library("openair", lib.loc="~/R/win-library/3.1")
detach("package:openair", unload=TRUE)
library("lubridate")
library("ggplot2")
suppressMessages(library("dplyr"))
library("tidyr")
data<-read.csv("activity.csv")
data$date<-ymd(data$date)
# #steps per day
# steps_day<-group_by(data,date)
# steps_day<-summarise(steps_day,steps=sum(steps))
# steps_day<-steps_day[complete.cases(steps_day),]
steps_day<-aggregate(steps~date,data,sum,na.rm=TRUE)
setwd("C:/Users/FERNANDO/Downloads/5 Reproducible Research/project/1")
setwd("~/GitHub/RepData_PeerAssessment1")
library("lubridate")
library("ggplot2")
suppressMessages(library("dplyr"))
library("tidyr")
data<-read.csv("activity.csv")
data$date<-ymd(data$date)
# #steps per day
# steps_day<-group_by(data,date)
# steps_day<-summarise(steps_day,steps=sum(steps))
# steps_day<-steps_day[complete.cases(steps_day),]
steps_day<-aggregate(steps~date,data,sum,na.rm=TRUE)
summary(steps_day$steps)
rango<-diff(range(steps_day$steps))
mean_step<-mean(steps_day$steps)
median_step<-median(steps_day$steps)
ggplot(steps_day, aes(x=steps), fill="green")+ geom_histogram(binwidth=rango/15, fill="green", colour="black")+theme_bw()+geom_vline(xintercept=mean_step, colour="red", size=1)+ggtitle("Steps per Day")
steps_interval<-aggregate(steps~interval,data,mean,na.rm=TRUE)
ggplot(steps_interval, aes(x = interval, y = steps)) + geom_line(color = "blue")+ theme_bw()+ ggtitle("Average number of steps by interval")
interval_of_maxsteps<-steps_interval[which.max(steps_interval$steps), ]$interval
imput_data<-data
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
imput_data$steps[i] = steps_interval[steps_interval$interval == data$interval[i],]$steps
}
}
head(data)#original data
head(imput_data) #data with mean of steps by interval
imput_steps_day<-aggregate(steps~date,imput_data,sum)
imput_rango<-diff(range(imput_steps_day$steps))
mean_imput_step<-mean(imput_steps_day$steps)
median_imput_step<-median(imput_steps_day$steps)
ggplot(imput_steps_day, aes(x=steps), fill="green")+ geom_histogram(binwidth=imput_rango/15, fill="green", colour="black")+theme_bw()+geom_vline(xintercept=mean_imput_step, colour="red", size=1)+ggtitle("Steps per Day in the imput data")
imput_interval_of_maxsteps<-imput_data[imput_data$steps == max(imput_data$steps), ]$interval
ifelse(weekdays(imput_data$date)="domingo" |weekdays(imput_data$date)="sÃ¡bado",c("weekday"),c("weekend"))
ifelse(weekdays(imput_data$date)=="domingo" |weekdays(imput_data$date)=="sÃ¡bado",c("weekday"),c("weekend"))
imput_data$dia<-ifelse(weekdays(imput_data$date)=="domingo" |weekdays(imput_data$date)=="sÃ¡bado",c("weekday"),c("weekend"))
View(imput_data)
table(imput_data$dia)
tipo_day <- function(date) {
if (weekdays(date) != "sÃ¡bado" & weekdays(date) != "domingo") {
return("weekday")
} else {
return("weekend")
}
}
imput_data$dia <- sapply(imput_data$date, function(x) {
tipo_day(x)
})
imput_data$dia <- as.factor(imput_data$dia)
table(imput_data$dia)
imput_data$dia<-ifelse(weekdays(imput_data$date)=="domingo" |weekdays(imput_data$date)=="sÃ¡bado",c("weekend"),c("weekday"))
imput_data$dia<-ifelse(weekdays(imput_data$date)=="domingo" |weekdays(imput_data$date)=="sÃ¡bado",c("weekend"),c("weekday"))
imput_data$dia<-as.factor(imput_data$dia)
library(lattice)
imput_steps_dia <- aggregate(steps ~ interval + dia, imput_data, mean)
xyplot(steps ~ interval | dia, data = imput_steps_dia, layout = c(1, 2), type = "l")
View(imput_data)
